name: 'Terraform Azure VM Deployment'

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout code from Gurleenkaur14/taskmanger
        uses: actions/checkout@v3
        with:
          repository:Gurleenkaur14/taskmanger
          token: ${{ secrets.REPOSITORY_A_TOKEN }}
        

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKERHUB_NAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 3: Build and Push Frontend Docker Image
      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_NAME }}/todof:latest -f task-manager-frontend/Dockerfile task-manager-frontend
          docker push ${{ secrets.DOCKERHUB_NAME }}/todof:latest

      # Step 4: Build and Push Backend Docker Image
      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_NAME }}/todob:latest -f task-manager-backend/Dockerfile task-manager-backend
          docker push ${{ secrets.DOCKERHUB_NAME }}/todob:latest
    
      # Step 5: Setup Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Step 6: Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Step 7: Validate Terraform Configuration
      - name: Validate Terraform
        run: terraform validate

      # Step 8: Plan Terraform Deployment
      - name: Plan Terraform
        id: plan
        run: terraform plan
        continue-on-error: true

      # Step 9: Terraform Plan Status Check
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Step 10: Apply Terraform Changes
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Step 11: Show Terraform Output (Public IP of VM)
      - name: Terraform Output
        run: terraform output

      # Step 12: Log in to Azure (to enable container actions on VM)
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 13: SSH into VM and Run Docker Containers (without SSH keys, using `custom_data`)
      - name: Deploy Docker Containers to VM
        run: |
          # Fetch public IP from Terraform output
          vm_ip=$(terraform output -raw public_ip)

          # Run Docker commands on VM (Ensure Docker is installed via `custom_data` in your main.tf)
          ssh -o StrictHostKeyChecking=no azureuser@$vm_ip << 'EOF'
            sudo docker login -u ${{ secrets.DOCKERHUB_NAME }} -p ${{ secrets.DOCKERHUB_PASSWORD}}
            sudo docker pull ${{ secrets.DOCKERHUB_NAME }}/todob:latest
            sudo docker pull ${{ secrets.DOCKERHUB_NAME }}/todof:latest
            sudo docker run -d -p 5000:5000 ${{ secrets.DOCKERHUB_NAME }}/todob:latest
            sudo docker run -d -p 80:80 ${{ secrets.DOCKERHUB_NAME }}/todof:latest
          EOF

